---
title: "EDS 221 Day 3 Interactive"
format: html
editor: visual
---

```{r}
library(palmerpenguins)
library(tidyverse)
```

## Conditional Statement

```{r}
temperature <- 95

if (temperature > 97) {
  print("Temperature Warning")
} else
  print("No temperature warning")
```

Create an if else statement for blue whale lengths. Create a variable blue whale, which has a value of 40 m. Add an if else statement that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is less than or equal to 20.

```{r}
blue_whale <- 40

if (blue_whale > 35) {
  print("GIANT")
} else if (blue_whale >= 20 & blue_whale <= 35) {
  print("MEDIUM")
  } else if (blue_whale < 20) {print("SMALL")}
```

## Switch Statement

```{r}
housing_type <- "whole"

switch(housing_type,
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))

# or written as if else statement:
if (housing_type == "whole") {
  print("400")
} else if (housing_type == "double") {
  print("750")
  } else if (housing_type == "single") {
  print("400")
    }
```

## For loops

```{r}
height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}

## for each value in height vector, return the sum of the value + the one right after it

for (i in seq_along(height)) {
  height_sum = height[i] + height[i + 1]
  print(height_sum)
}

## write a for loop that calculates the value of height for each element, divided by the mean of the entire height vector

for (i in seq_along(height)) {
  standardize_ht = height[i] / mean(height)
  print(standardize_ht)
}
```

Write a for loop with a conditional if statement that returns the means of all **numeric** variables in the penguins dataset.

-   is.numeric - asks is this thing numeric?

-   mean(vec, na.rm = TRUE) omits NA

```{r}
for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    mean_val <- mean(penguins[[i]], na.rm = TRUE)
    print(mean_val)
  }
}
```

## Functional programming for easier iteration

Use apply() to iterate over rows or columns. MARGIN = 1 (rows), MARGIN = 2 (columns)

```{r}
apply(X = mtcars, MARGIN = 2, FUN = median)

# without the labels: (assumes this order)
apply(mtcars, 2, median)
```

## dplyr::across()

Starter: find mean flipper length of penguins by species

```{r}
penguins %>% 
  group_by(species, sex) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))
```

```{r}
penguins %>% 
  group_by(species, island) %>% 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchiladas"

str_detect(food, "burritos")

if (str_detect(food, "burritos")) {
  print("yay burritos!")
} else {
  print("What about burritos?")
}
```
